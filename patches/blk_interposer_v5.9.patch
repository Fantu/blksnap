diff --git a/block/Kconfig b/block/Kconfig
index a2297edfdde8..e544d922a130 100644
--- a/block/Kconfig
+++ b/block/Kconfig
@@ -202,6 +202,16 @@ config BLK_INLINE_ENCRYPTION_FALLBACK
 	  by falling back to the kernel crypto API when inline
 	  encryption hardware is not present.
 
+config BLK_INTERPOSE
+	bool "Allow to use block layer interposer modules"
+	default y
+	help
+	  Enabling this lets kernel modules intercept bio requests for any
+	  block device. This allows them to implement changed block tracking
+	  and snapshots without any reconfiguration of the existing setup.
+	  For example, this option allows snapshotting of a block device
+	  without adding it to LVM.
+
 menu "Partition Types"
 
 source "block/partitions/Kconfig"
diff --git a/block/blk-core.c b/block/blk-core.c
index 2db8bda43b6e..1e21aa4cf2b7 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -1054,6 +1054,13 @@ blk_qc_t submit_bio_noacct(struct bio *bio)
 		bio_list_add(&current->bio_list[0], bio);
 		return BLK_QC_T_NONE;
 	}
+	if (blk_has_interposer(bio->bi_disk, bio->bi_partno) &&
+		!(bio->bi_flags & BIO_NO_INTERPOSE)) {
+		blk_qc_t ret;
+
+		if (blk_interpose(bio, &ret))
+			return ret;
+	}
 
 	if (!bio->bi_disk->fops->submit_bio)
 		return __submit_bio_noacct_mq(bio);
diff --git a/block/genhd.c b/block/genhd.c
index 0a273211fec2..71dcfeb4838e 100644
--- a/block/genhd.c
+++ b/block/genhd.c
@@ -2361,3 +2361,168 @@ static void disk_release_events(struct gendisk *disk)
 	WARN_ON_ONCE(disk->ev && disk->ev->block != 1);
 	kfree(disk->ev);
 }
+
+#ifdef CONFIG_BLK_INTERPOSE
+
+static struct blk_interposer *__new_interposer(const struct blk_interposer_ops *ops, void *data)
+{
+	struct blk_interposer *interposer;
+
+	interposer = kzalloc(sizeof(struct blk_interposer), GFP_KERNEL);
+	if (!interposer)
+		return NULL;
+
+	kref_init(&interposer->kref);
+	init_completion(&interposer->unused);
+	interposer->ops = ops;
+	interposer->data = data;
+
+	return interposer;
+}
+
+static void __release_interposer(struct kref *kref)
+{
+	struct blk_interposer *interposer = container_of(kref, struct blk_interposer, kref);
+
+	// interposer is ready for free
+	complete(&interposer->unused);
+}
+
+static void __put_interposer(struct blk_interposer *interposer)
+{
+	kref_put(&interposer->kref, __release_interposer);
+}
+
+static struct blk_interposer *__get_interposer(struct gendisk *disk, int partno)
+{
+	struct blk_interposer *interposer = NULL;
+	struct hd_struct *part;
+
+	rcu_read_lock();
+	part = __disk_get_part(disk, partno);
+	if (part) {
+		interposer = rcu_dereference(part->interposer);
+		if (interposer)
+			kref_get(&interposer->kref);
+	}
+	rcu_read_unlock();
+
+	return interposer;
+}
+
+static struct blk_interposer *__remove_interposer(struct gendisk *disk, int partno)
+{
+	struct blk_interposer *interposer = NULL;
+	struct hd_struct *part;
+
+	rcu_read_lock();
+	part = __disk_get_part(disk, partno);
+	if (part) {
+		interposer = rcu_dereference(part->interposer);
+		if (interposer)
+			rcu_assign_pointer(part->interposer, NULL);
+	}
+	rcu_read_unlock();
+
+	return interposer;
+}
+
+static int __add_interposer(struct gendisk *disk, int partno, struct blk_interposer *interposer)
+{
+	int ret = -ENODEV;
+	struct hd_struct *part;
+
+	rcu_read_lock();
+	part = __disk_get_part(disk, partno);
+	if (part) {
+		rcu_assign_pointer(part->interposer, interposer);
+		ret = 0;
+	}
+	rcu_read_unlock();
+
+	return ret;
+}
+
+bool blk_has_interposer(struct gendisk *disk, int partno)
+{
+	bool has_interposer = false;
+	struct hd_struct *part;
+
+	rcu_read_lock();
+	part = __disk_get_part(disk, partno);
+	if (part)
+		has_interposer = rcu_dereference(part->interposer) ? true : false;
+	rcu_read_unlock();
+
+	return has_interposer;
+}
+
+void blk_cleanup_interposer(struct gendisk *disk, struct hd_struct *part)
+{
+	struct blk_interposer *interposer;
+
+	rcu_read_lock();
+	interposer = rcu_dereference(part->interposer);
+	if (interposer) {
+		kref_get(&interposer->kref);
+
+		rcu_assign_pointer(part->interposer, NULL);
+	}
+	rcu_read_unlock();
+
+	if (!interposer)
+		return;
+
+	synchronize_rcu();
+
+	interposer->ops->release(interposer->data);
+	__put_interposer(interposer);
+
+	kref_put(&interposer->kref, __release_interposer);
+	wait_for_completion(&interposer->unused);
+	kfree(interposer);
+}
+
+bool blk_interpose(struct bio *bio, blk_qc_t *result)
+{
+	bool ret;
+	struct blk_interposer *interposer;
+
+	interposer = __get_interposer(bio->bi_disk, bio->bi_partno);
+	if (!interposer)
+		return false;
+
+	ret = interposer->ops->submit_bio(interposer->data, bio, result);
+
+	__put_interposer(interposer);
+
+	return ret;
+}
+
+int blk_interposer_add(struct gendisk *disk, int partno,
+		       const struct blk_interposer_ops *ops, void *data)
+{
+	struct blk_interposer *interposer;
+
+	interposer = __new_interposer(ops, data);
+	if (!interposer)
+		return -ENOMEM;
+
+	return __add_interposer(disk, partno, interposer);
+}
+EXPORT_SYMBOL_GPL(blk_interposer_add);
+
+void blk_interposer_remove(struct gendisk *disk, int partno)
+{
+	struct blk_interposer *interposer = __remove_interposer(disk, partno);
+
+	synchronize_rcu();
+
+	__put_interposer(interposer);
+	wait_for_completion(&interposer->unused);
+	kfree(interposer);
+}
+EXPORT_SYMBOL_GPL(blk_interposer_remove);
+
+#endif //CONFIG_BLK_INTERPOSE
+
diff --git a/block/partitions/core.c b/block/partitions/core.c
index a02e22411594..88320419ef28 100644
--- a/block/partitions/core.c
+++ b/block/partitions/core.c
@@ -330,6 +330,8 @@ void delete_partition(struct hd_struct *part)
 	struct disk_part_tbl *ptbl =
 		rcu_dereference_protected(disk->part_tbl, 1);
 
+	blk_cleanup_interposer(disk, part);
+
 	/*
 	 * ->part_tbl is referenced in this part's release handler, so
 	 *  we have to hold the disk device
diff --git a/drivers/block/Kconfig b/drivers/block/Kconfig
index ecceaaa1a66f..1c8bebd66afa 100644
--- a/drivers/block/Kconfig
+++ b/drivers/block/Kconfig
@@ -235,7 +235,7 @@ config BLK_DEV_CRYPTOLOOP
 	select CRYPTO_CBC
 	depends on BLK_DEV_LOOP
 	help
-	  Say Y here if you want to be able to use the ciphers that are 
+	  Say Y here if you want to be able to use the ciphers that are
 	  provided by the CryptoAPI as loop transformation. This might be
 	  used as hard disk encryption.
 
@@ -287,7 +287,7 @@ config BLK_DEV_SX8
 	tristate "Promise SATA SX8 support"
 	depends on PCI
 	help
-	  Saying Y or M here will enable support for the 
+	  Saying Y or M here will enable support for the
 	  Promise SATA SX8 controllers.
 
 	  Use devices /dev/sx8/$N and /dev/sx8/$Np$M.
@@ -460,4 +460,6 @@ config BLK_DEV_RSXX
 
 source "drivers/block/rnbd/Kconfig"
 
+source "drivers/block/blk-snap/Kconfig"
+
 endif # BLK_DEV
diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index e1f63117ee94..f4bedd79acca 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -4,7 +4,7 @@
 #
 # 12 June 2000, Christoph Hellwig <hch@infradead.org>
 # Rewritten to use lists instead of if-statements.
-# 
+#
 
 # needed for trace events
 ccflags-y				+= -I$(src)
@@ -40,6 +40,7 @@ obj-$(CONFIG_BLK_DEV_PCIESSD_MTIP32XX)	+= mtip32xx/
 obj-$(CONFIG_BLK_DEV_RSXX) += rsxx/
 obj-$(CONFIG_ZRAM) += zram/
 obj-$(CONFIG_BLK_DEV_RNBD)	+= rnbd/
+obj-$(CONFIG_BLK_SNAP)		+= blk-snap/
 
 obj-$(CONFIG_BLK_DEV_NULL_BLK)	+= null_blk.o
 null_blk-objs	:= null_blk_main.o
diff --git a/drivers/block/blk-snap/Kconfig b/drivers/block/blk-snap/Kconfig
new file mode 100644
index 000000000000..132ff3f88352
--- /dev/null
+++ b/drivers/block/blk-snap/Kconfig
@@ -0,0 +1,18 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+# blk-snap - block device snapshot module configuration
+#
+
+comment "Block device snapshot module"
+	depends on BLK_INTERPOSE
+
+config BLK_SNAP
+	tristate "Block device snapshot module"
+	depends on BLK_INTERPOSE
+	default M
+	help
+	  Allow to create snapshots and track block changes for a block
+	  devices. Designed for creating backups for any block devices
+	  (without device mapper). Snapshots are temporary and are released
+	  then backup is completed. Change block tracking allows you to
+	  create incremental or differential backups.
diff --git a/drivers/block/blk-snap/Makefile b/drivers/block/blk-snap/Makefile
new file mode 100644
index 000000000000..aab1ee904db3
--- /dev/null
+++ b/drivers/block/blk-snap/Makefile
@@ -0,0 +1,4 @@
+# SPDX-License-Identifier: GPL-2.0
+blk-snap-y += blk_snap.o
+
+obj-$(CONFIG_BLK_SNAP)	 += blk-snap.o
diff --git a/drivers/block/blk-snap/blk_snap.c b/drivers/block/blk-snap/blk_snap.c
new file mode 100644
index 000000000000..6ca940aba351
--- /dev/null
+++ b/drivers/block/blk-snap/blk_snap.c
@@ -0,0 +1,92 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/blkdev.h>
+#include <linux/genhd.h>
+
+int device_major = 8;
+int device_minor = 1;
+
+static dev_t device;
+static struct block_device *blk_dev;
+static atomic_t counter;
+
+static bool _blk_snap_submit_bio(void *data, struct bio *bio, blk_qc_t *result)
+{
+	atomic_t *cnt = data;
+
+	atomic_inc(cnt);
+
+	return false;
+}
+
+static void _blk_snap_release(void *data)
+{
+	atomic_t *cnt = data;
+
+	pr_info("Release callback was called\n");
+	pr_info("Counter: %d\n", atomic_read(cnt));
+}
+
+const struct blk_interposer_ops ops = {
+	.submit_bio = _blk_snap_submit_bio,
+	.release = _blk_snap_release };
+
+static int __init blk_snap_init(void)
+{
+	int ret = 0;
+
+	pr_info("Loading\n");
+
+	pr_info("Tracking device: %d:%d\n", device_major, device_minor);
+	device = MKDEV(device_major, device_minor);
+
+	blk_dev = bdget(device);
+	if (blk_dev == NULL) {
+		pr_err("Unable to open device [%d:%d]: bdget return NULL\n",
+		       MAJOR(device), MINOR(device));
+		return -ENODEV;
+	}
+
+	ret = blkdev_get(blk_dev, FMODE_READ | FMODE_WRITE, NULL);
+	if (ret < 0) {
+		pr_err("Unable to open device: blkdev_get return error code %d\n", 0 - ret);
+		return ret;
+	}
+
+	ret = blk_interposer_add(blk_dev->bd_disk, blk_dev->bd_partno, &ops, (void *)(&counter));
+	if (ret) {
+		blkdev_put(blk_dev, FMODE_READ);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void __exit blk_snap_exit(void)
+{
+	pr_info("Unloading module\n");
+
+	blk_interposer_remove(blk_dev->bd_disk, blk_dev->bd_partno);
+
+	blkdev_put(blk_dev, FMODE_READ);
+
+	pr_info("Counter: %d\n", atomic_read(&counter));
+}
+
+module_init(blk_snap_init);
+module_exit(blk_snap_exit);
+
+MODULE_DESCRIPTION("Block Layer Snapshot Kernel Module");
+MODULE_AUTHOR("Veeam Software Group GmbH");
+MODULE_LICENSE("GPL");
+
+module_param_named(device_major, device_major, int, 0644);
+MODULE_PARM_DESC(device_major, "Tracking device major number");
+module_param_named(device_minor, device_minor, int, 0644);
+MODULE_PARM_DESC(device_minor, "Tracking device minor number");
+
diff --git a/include/linux/blk_types.h b/include/linux/blk_types.h
index d9b69bbde5cc..e28c44ddc958 100644
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@ -207,7 +207,7 @@ struct bio {
 						 * top bits REQ_OP. Use
 						 * accessors.
 						 */
-	unsigned short		bi_flags;	/* status, etc and bvec pool number */
+	unsigned int		bi_flags;	/* status, etc and bvec pool number */
 	unsigned short		bi_ioprio;
 	unsigned short		bi_write_hint;
 	blk_status_t		bi_status;
@@ -284,6 +284,7 @@ enum {
 				 * of this bio. */
 	BIO_CGROUP_ACCT,	/* has been accounted to a cgroup */
 	BIO_TRACKED,		/* set if bio goes through the rq_qos path */
+	BIO_NO_INTERPOSE,	/* set if bio should not be interposed */
 	BIO_FLAG_LAST
 };
 
@@ -302,7 +303,7 @@ enum {
  * freed.
  */
 #define BVEC_POOL_BITS		(3)
-#define BVEC_POOL_OFFSET	(16 - BVEC_POOL_BITS)
+#define BVEC_POOL_OFFSET	(32 - BVEC_POOL_BITS)
 #define BVEC_POOL_IDX(bio)	((bio)->bi_flags >> BVEC_POOL_OFFSET)
 #if (1<< BVEC_POOL_BITS) < (BVEC_POOL_NR+1)
 # error "BVEC_POOL_BITS is too small"
diff --git a/include/linux/genhd.h b/include/linux/genhd.h
index 38f23d757013..8a53502a9cd2 100644
--- a/include/linux/genhd.h
+++ b/include/linux/genhd.h
@@ -4,7 +4,7 @@
 
 /*
  * 	genhd.h Copyright (C) 1992 Drew Eckhardt
- *	Generic hard disk header file by  
+ *	Generic hard disk header file by
  * 		Drew Eckhardt
  *
  *		<drew@colorado.edu>
@@ -50,6 +50,21 @@ struct partition_meta_info {
 	u8 volname[PARTITION_META_INFO_VOLNAMELTH];
 };
 
+#ifdef CONFIG_BLK_INTERPOSE
+struct blk_interposer_ops {
+	bool (*submit_bio)(void *data, struct bio *bio, blk_qc_t *result);
+	void (*release)(void *data);
+};
+
+struct blk_interposer {
+	struct kref kref;
+	struct completion unused;
+
+	const struct blk_interposer_ops *ops;
+	void *data;
+};
+#endif /* CONFIG_BLK_INTERPOSE */
+
 struct hd_struct {
 	sector_t start_sect;
 	/*
@@ -73,6 +88,10 @@ struct hd_struct {
 	int make_it_fail;
 #endif
 	struct rcu_work rcu_work;
+
+#if IS_ENABLED(CONFIG_BLK_INTERPOSE)
+	struct blk_interposer __rcu *interposer;
+#endif
 };
 
 /**
@@ -409,4 +428,31 @@ static inline dev_t blk_lookup_devt(const char *name, int partno)
 }
 #endif /* CONFIG_BLOCK */
 
+#ifdef CONFIG_BLK_INTERPOSE
+
+bool blk_has_interposer(struct gendisk *disk, int partno);
+void blk_cleanup_interposer(struct gendisk *disk, struct hd_struct *part);
+bool blk_interpose(struct bio *bio, blk_qc_t *result);
+
+int blk_interposer_add(struct gendisk *disk, int partno, const struct blk_interposer_ops *ops,
+		       void *data);
+void blk_interposer_remove(struct gendisk *disk, int partno);
+
+#else /* CONFIG_BLK_INTERPOSE */
+
+static inline bool blk_has_interposer(struct gendisk *disk, int partno)
+{
+	return false;
+}
+static inline void blk_cleanup_interposer(struct gendisk *disk, struct hd_struct *part)
+{
+
+}
+static inline bool blk_interpose(struct bio *bio, blk_qc_t *result)
+{
+	return false;
+}
+
+#endif /* CONFIG_BLK_INTERPOSE */
+
 #endif /* _LINUX_GENHD_H */
